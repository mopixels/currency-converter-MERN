{"version":3,"sources":["components/EuroRow.js","components/ForeignRow.js","App.js","serviceWorker.js","index.js"],"names":["EuroRow","eurAmount","onChangeEurAmount","type","className","defaultValue","value","onChange","style","height","fontSize","padding","borderRadius","outline","ForeignRow","allCurrencies","foreignAmount","onChangeForeignAmount","selectedCurrency","convertableCurrencies","filter","currency","currentRate","length","width","paddingLeft","marginLeft","disabled","hidden","map","item","key","_id","shortName","fullName","App","useState","setAllCurrencies","refreshDate","setRefreshDate","eur","setEur","foreignCurrency","setForeignCurrency","selectedRate","setSelectedRate","selectedCurrencyName","setSelectedCurrencyName","fromEuro","setFromEuro","parseFloat","toFixed","useEffect","a","fetch","response","json","parsedDate","Date","parse","lastUpdated","toLocaleDateString","fetchData","timerFunc","setTimeout","axios","post","foreignCurrencyAmount","then","res","console","log","data","clearTimeout","e","target","exhangeRate","find","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f05f4d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst EuroRow = ({ eurAmount, onChangeEurAmount }) => {\r\n\tconst eurInputStyle = {\r\n\t\theight: '6rem',\r\n\t\tfontSize: '2rem',\r\n\t\tpadding: '.5rem',\r\n\t\tborderRadius: '1rem',\r\n\t\toutline: 'none',\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"number\"\r\n\t\t\t\tclassName=\"input\"\r\n\t\t\t\tdefaultValue={0}\r\n\t\t\t\tvalue={eurAmount}\r\n\t\t\t\tonChange={onChangeEurAmount}\r\n\t\t\t\tstyle={eurInputStyle}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default EuroRow;\r\n","import React from 'react';\r\n\r\nconst ForeignRow = ({\r\n\tallCurrencies,\r\n\tforeignAmount,\r\n\tonChangeForeignAmount,\r\n\tselectedCurrency,\r\n}) => {\r\n\t//FILTERING OUT CURRENCIES WITHOUT EXCHANGE RATE\r\n\tconst convertableCurrencies = allCurrencies.filter(\r\n\t\t(currency) => currency.currentRate.length > 0\r\n\t);\r\n\r\n\tconst foreignInputStyle = {\r\n\t\theight: '6rem',\r\n\t\tfontSize: '2rem',\r\n\t\tpadding: '.5rem',\r\n\t\tborderRadius: '1rem',\r\n\t\toutline: 'none',\r\n\t};\r\n\r\n\tconst currencyDropdown = {\r\n\t\twidth: '15rem',\r\n\t\theight: '3rem',\r\n\t\tborderRadius: '1rem',\r\n\t\tpaddingLeft: '.5rem',\r\n\t\tmarginLeft: '1rem',\r\n\t\toutline: 'none',\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"number\"\r\n\t\t\t\tclassName=\"input\"\r\n\t\t\t\tvalue={foreignAmount}\r\n\t\t\t\tonChange={onChangeForeignAmount}\r\n\t\t\t\tstyle={foreignInputStyle}\r\n\t\t\t/>\r\n\t\t\t<select\r\n\t\t\t\tdefaultValue=\"\"\r\n\t\t\t\tonChange={selectedCurrency}\r\n\t\t\t\tstyle={currencyDropdown}\r\n\t\t\t>\r\n\t\t\t\t<option value=\"\" disabled hidden>\r\n\t\t\t\t\tChoose currency\r\n\t\t\t\t</option>\r\n\t\t\t\t{convertableCurrencies.map((item) => (\r\n\t\t\t\t\t<option key={item._id} value={item.currentRate}>\r\n\t\t\t\t\t\t{item.shortName} | {item.fullName}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ForeignRow;\r\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport EuroRow from './components/EuroRow';\nimport ForeignRow from './components/ForeignRow';\nimport './App.css';\n\nfunction App() {\n\tconst [allCurrencies, setAllCurrencies] = useState();\n\tconst [refreshDate, setRefreshDate] = useState();\n\n\tconst [eur, setEur] = useState();\n\tconst [foreignCurrency, setForeignCurrency] = useState();\n\tconst [selectedRate, setSelectedRate] = useState();\n\tconst [selectedCurrencyName, setSelectedCurrencyName] = useState();\n\tconst [fromEuro, setFromEuro] = useState(true);\n\n\tlet foreignAmount, eurAmount;\n\n\t//MAIN CONVERSION\n\tif (fromEuro) {\n\t\t//AVOIDING foreignAmount IS NaN WARNING\n\t\tif (!eur) {\n\t\t\tforeignAmount = '';\n\t\t} else {\n\t\t\tconst result = eur * selectedRate;\n\t\t\tforeignAmount = parseFloat(result.toFixed(4));\n\t\t}\n\t} else {\n\t\tconst result = foreignCurrency / selectedRate;\n\t\teurAmount = parseFloat(result.toFixed(4));\n\t}\n\n\t//HANDLING EURO INPUT\n\tconst handleEurAmountChange = (e) => {\n\t\tsetEur(e.target.value);\n\t\tsetFromEuro(true);\n\t};\n\n\t//HANDLING OTHER CURRENCY INPUT\n\tconst handleForeignAmountChange = (e) => {\n\t\tsetForeignCurrency(e.target.value);\n\t\tsetFromEuro(false);\n\t};\n\n\t//HANDLING CHANGED CURRENCY\n\tconst selectedCurrency = (e) => {\n\t\tconst exhangeRate = e.target.value;\n\t\tsetSelectedRate(exhangeRate);\n\t\tconst selectedCurrency = allCurrencies.find(\n\t\t\t(name) => name.currentRate === exhangeRate\n\t\t);\n\t\tsetSelectedCurrencyName(selectedCurrency.fullName);\n\t};\n\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tlet response = await fetch(\n\t\t\t\t'https://currency-converter-lbapi.herokuapp.com/currencies'\n\t\t\t);\n\t\t\tresponse = await response.json();\n\t\t\tsetAllCurrencies(response);\n\t\t\tconst parsedDate = Date.parse(response[1].lastUpdated);\n\t\t\tsetRefreshDate(new Date(parsedDate).toLocaleDateString('lt-LT'));\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\t//SENDING LOGS TO DB\n\tuseEffect(() => {\n\t\tlet timerFunc = setTimeout(() => {\n\t\t\tfromEuro\n\t\t\t\t? (eur || foreignAmount) &&\n\t\t\t\t  selectedCurrencyName &&\n\t\t\t\t  axios\n\t\t\t\t\t\t.post('https://currency-converter-lbapi.herokuapp.com/logs', {\n\t\t\t\t\t\t\teurAmount: eur,\n\t\t\t\t\t\t\tforeignCurrencyAmount: foreignAmount,\n\t\t\t\t\t\t\tforeignCurrency: selectedCurrencyName,\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((res) => console.log(res.data))\n\t\t\t\t: (eurAmount || foreignCurrency) &&\n\t\t\t\t  selectedCurrencyName &&\n\t\t\t\t  axios\n\t\t\t\t\t\t.post('https://currency-converter-lbapi.herokuapp.com/logs', {\n\t\t\t\t\t\t\teurAmount: eurAmount,\n\t\t\t\t\t\t\tforeignCurrencyAmount: foreignCurrency,\n\t\t\t\t\t\t\tforeignCurrency: selectedCurrencyName,\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((res) => console.log(res.data));\n\t\t}, 1000);\n\t\treturn () => clearTimeout(timerFunc);\n\t}, [selectedCurrencyName, eur, foreignCurrency]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t{allCurrencies ? (\n\t\t\t\t<div>\n\t\t\t\t\t<h1>Currency converter</h1>\n\t\t\t\t\t<p className=\"refreshRow\">Last refresh: {refreshDate}</p>\n\t\t\t\t\t<div className=\"eurRow\">\n\t\t\t\t\t\t<EuroRow\n\t\t\t\t\t\t\tonChangeEurAmount={handleEurAmountChange}\n\t\t\t\t\t\t\teurAmount={eurAmount}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p className=\"euroSymbol\">€</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"arrows\">⇅</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<ForeignRow\n\t\t\t\t\t\t\tallCurrencies={allCurrencies}\n\t\t\t\t\t\t\tonChangeForeignAmount={handleForeignAmountChange}\n\t\t\t\t\t\t\tforeignAmount={foreignAmount}\n\t\t\t\t\t\t\tselectedCurrency={selectedCurrency}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<h3>Loading...</h3>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}